@page "/profile"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageHeadingComponent Level="1" HeaderText="@_pageTitle" />
<div class="container mx-auto">

	<AuthorizeView>
		<Authorized>
			<div class="container-card">
				<h2 class="text-2xl font-semibold text-gray-100 mb-4">Profile Information</h2>

				<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
					<div>
						<h3 class="text-lg font-semibold text-gray-100 mb-2">Basic Information</h3>
						<div class="space-y-2">
							<p class="text-gray-300">
								<span class="font-medium">Name:</span>
								@GetClaimValue(context.User, "name", "nickname", "given_name", ClaimTypes.Name)
							</p>
							<p class="text-gray-300">
								<span class="font-medium">Email:</span>
								@GetClaimValue(context.User, "email", ClaimTypes.Email)
							</p>
							<p class="text-gray-300">
								<span class="font-medium">User ID:</span>
								@GetClaimValue(context.User, "sub", ClaimTypes.NameIdentifier)
							</p>
						</div>
					</div>

					<div>
						<h3 class="text-lg font-semibold text-gray-100 mb-2">Roles & Permissions</h3>
						<div class="space-y-2">
							@{
								var roles = context.User.FindAll(ClaimTypes.Role).ToList();
							}
							@if (roles.Any())
							{
								<p class="text-gray-300">
									<span class="font-medium">Roles:</span>
								</p>
								<ul class="list-disc list-inside text-gray-300 ml-4">
									@foreach (var role in roles)
									{
										<li class="text-green-400">@role.Value</li>
									}
								</ul>
							}
							else
							{
								<p class="text-gray-400">No roles assigned</p>
							}
						</div>
					</div>
				</div>
			</div>

			<div class="container-card">
				<h2 class="text-2xl font-semibold text-gray-100 mb-4">All Claims</h2>
				<p class="text-gray-400 text-sm mb-4">Debug information showing all claims for this user:</p>

				<div class="bg-gray-800 rounded p-4 overflow-auto">
					<table class="w-full text-sm">
						<thead>
							<tr class="border-b border-gray-600">
								<th class="text-left text-gray-300 pb-2">Claim Type</th>
								<th class="text-left text-gray-300 pb-2">Value</th>
							</tr>
						</thead>
						<tbody>
							@foreach (var claim in context.User.Claims.OrderBy(c => c.Type))
							{
								<tr class="border-b border-gray-700">
									<td class="py-1 text-gray-400">@claim.Type</td>
									<td class="py-1 text-gray-300">@claim.Value</td>
								</tr>
							}
						</tbody>
					</table>
				</div>
			</div>
		</Authorized>
		<NotAuthorized>
			<div class="text-center">
				<p class="text-gray-300 mb-4">You must be logged in to view your profile.</p>
				<a href="/Account/Login" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
					Login
				</a>
			</div>
		</NotAuthorized>
	</AuthorizeView>
</div>

@code {

	private const string _pageTitle = "User Profile";

	private static string GetClaimValue(ClaimsPrincipal user, params string[] claimTypes)
	{
		foreach (var claimType in claimTypes)
		{
			var claim = user.FindFirst(claimType);
			if (claim != null && !string.IsNullOrEmpty(claim.Value))
			{
				return claim.Value;
			}
		}
		return "N/A";
	}
}