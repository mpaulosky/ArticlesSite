<header
	class="container flex items-center justify-between max-w-7xl px-6 py-2 mx-auto rounded-b-mdxl:max-w-5xl border-b border-blue-700 shadow-md shadow-blue-500">
	<a href="#" class="block h-8 text-2xl font-semibold hover:text-blue-700">@_siteName</a>
	<div class="flex items-center">
		<div class="hidden space-x-2 font-medium sm:block">
			<AuthorizeView>
				<span class="p-1">Hey @context.User.Identity?.Name!</span>
			</AuthorizeView>
			<a href="/articles" class="p-1 hover:text-blue-700">Articles</a>
			<AuthorizeView Roles="Admin">
				<a href="/articles/create" class="p-1 hover:text-blue-700">Create Article</a>
			</AuthorizeView>
			<a href="/categories" class="p-1 hover:text-blue-700">Categories</a>
			<a href="/about" class="p-1 hover:text-blue-700">About</a>
			<a href="/contact" class="p-1 hover:text-blue-700">Contacts</a>
			<AuthorizeView>
				<Authorized>
					<a href="/profile" class="p-1 hover:text-blue-700">Profile</a>
				</Authorized>
			</AuthorizeView>
			<LoginComponent/>
		</div>
	</div>
</header>

@code {

	private const string _siteName = "Article Site";

	[CascadingParameter] private Task<AuthenticationState>? AuthenticationState { get; set; }

	private string _username = "";

	protected override async Task OnInitializedAsync()
	{

		if (AuthenticationState is not null)
		{
			var state = await AuthenticationState;

			_username = state.User.Identity?.Name ?? string.Empty;
		}
	}

}