@page "/categories/edit/{id}"

@inject NavigationManager Navigation
@inject Web.Components.Features.Categories.CategoryDetails.GetCategory.IGetCategoryHandler GetHandler
@inject Web.Components.Features.Categories.CategoryEdit.EditCategory.IEditCategoryHandler EditHandler
@inject ILogger<Edit> Logger

@attribute [Authorize]

<PageHeadingComponent HeaderText="Edit Category" Level="1" TextColorClass="blue-500"/>

@if (_isLoading)
{
	<LoadingComponent/>
}
else if (_category is null)
{
	<ErrorAlertComponent Title="Unable to load category">
		@(_errorMessage ?? "Category not found.")
	</ErrorAlertComponent>
}
else
{
	<div class="card">
		<div class="card-body">
			<EditForm Model="@_category" OnValidSubmit="HandleSubmit">
				<DataAnnotationsValidator/>
				<ValidationSummary/>

				@if (!string.IsNullOrEmpty(_submitErrorMessage))
				{
					<ErrorAlertComponent Title="Error updating category">
						@_submitErrorMessage
					</ErrorAlertComponent>
				}

				<div class="mb-3">
					<label for="categoryName" class="form-label">Category Name</label>
					<InputText id="categoryName" class="form-control" @bind-Value="_category.CategoryName" placeholder="Enter category name"/>
					<ValidationMessage For="@(() => _category.CategoryName)"/>
				</div>

				<div class="mb-3">
					<div class="form-check">
						<InputCheckbox id="isArchived" class="form-check-input" @bind-Value="_category.IsArchived"/>
						<label class="form-check-label" for="isArchived">
							Archive this category
						</label>
					</div>
				</div>

				<div class="mb-3">
					<button type="submit" class="btn btn-primary" disabled="@_isSubmitting">
						@if (_isSubmitting)
						{
							<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
							<span>Saving...</span>
						}
						else
						{
							<span>Save Changes</span>
						}
					</button>
					<button type="button" class="btn btn-light ms-2" @onclick="GoToList" disabled="@_isSubmitting">Cancel</button>
				</div>
			</EditForm>
		</div>
	</div>
}

@code {

	/// <summary>
	///   The unique identifier of the category to edit.
	/// </summary>
	[Parameter]
	public required string Id { get; set; } = string.Empty;

	[CascadingParameter] private Task<AuthenticationState>? AuthenticationState { get; set; }

	/// <summary>
	///   The category data being edited.
	/// </summary>
	private CategoryDto? _category;

	/// <summary>
	///   Indicates whether the component is currently loading data.
	/// </summary>
	private bool _isLoading = true;

	/// <summary>
	///   Indicates whether the form is currently being submitted.
	/// </summary>
	private bool _isSubmitting;

	/// <summary>
	///   Error message returned by the handler when loading fails.
	/// </summary>
	private string? _errorMessage;

	/// <summary>
	///   Error message to display if update fails.
	/// </summary>
	private string? _submitErrorMessage;

	/// <summary>
	///   Initializes the component by loading the category data.
	/// </summary>
	protected override async Task OnInitializedAsync()
	{
		Logger?.LogInformation("Loading category for edit: {CategoryId}", Id);
		_isLoading = true;

		try
		{
			var result = await GetHandler.HandleAsync(Id);

			if (result is { Success: true })
			{
				_category = result.Value;
				_errorMessage = null;
				Logger?.LogInformation("Category loaded successfully for edit: {CategoryId}", Id);
			}
			else
			{
				_category = null;
				_errorMessage = result?.Error ?? "Category not found.";
				Logger?.LogWarning("Failed to load category for edit: {CategoryId}. Error: {Error}", Id, _errorMessage);
			}
		}
		finally
		{
			_isLoading = false;
		}
	}

	/// <summary>
	///   Handles the form submission to update the category.
	/// </summary>
	private async Task HandleSubmit()
	{
		if (_category is null)
		{
			return;
		}

		Logger?.LogInformation("Updating category: {CategoryId}", _category.Id);
		_isSubmitting = true;
		_submitErrorMessage = null;

		try
		{
			var result = await EditHandler.HandleAsync(_category);

			if (result is { Success: true })
			{
				Logger?.LogInformation("Category updated successfully: {CategoryId}", _category.Id);
				Navigation.NavigateTo("/categories");
			}
			else
			{
				_submitErrorMessage = result?.Error ?? "Failed to update category.";
				Logger?.LogWarning("Failed to update category. Error: {Error}", _submitErrorMessage);
			}
		}
		catch (Exception ex)
		{
			_submitErrorMessage = $"An unexpected error occurred: {ex.Message}";
			Logger?.LogError(ex, "Exception while updating category");
		}
		finally
		{
			_isSubmitting = false;
		}
	}

	/// <summary>
	///   Navigates back to the category list page.
	/// </summary>
	private void GoToList()
	{
		Navigation.NavigateTo("/categories");
	}

}
