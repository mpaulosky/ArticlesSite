@page "/categories/details/{id}"

@inject NavigationManager Navigation
@inject IGetCategoryHandler GetHandler
@inject ILogger<Details> Logger

@attribute [Authorize]

<PageHeadingComponent HeaderText="Category Details" Level="1" TextColorClass="blue-500"/>

@if (_isLoading)
{
	<LoadingComponent/>
}
else if (_category is null)
{
	<ErrorAlertComponent Title="Unable to load category">
		@(_errorMessage ?? "Category not found.")
	</ErrorAlertComponent>
}
else
{
	<div class="card">
		<div class="card-body">
			<h2>@_category.CategoryName</h2>
			<hr/>
			<dl class="row">
				<dt class="col-sm-3">Category ID</dt>
				<dd class="col-sm-9">@_category.Id</dd>

				<dt class="col-sm-3">Created On</dt>
				<dd class="col-sm-9">@_category.CreatedOn.ToString("F")</dd>

				<dt class="col-sm-3">Modified On</dt>
				<dd class="col-sm-9">@(_category.ModifiedOn?.ToString("F") ?? "Never")</dd>

				<dt class="col-sm-3">Status</dt>
				<dd class="col-sm-9">
					@if (_category.IsArchived)
					{
						<span class="badge bg-secondary">Archived</span>
					}
					else
					{
						<span class="badge bg-success">Active</span>
					}
				</dd>
			</dl>
			<div class="mt-3">
				<button class="btn btn-secondary" @onclick="GoToEdit" disabled="@_category.IsArchived">Edit</button>
				<button class="btn btn-light" @onclick="GoToList">Back to List</button>
			</div>
		</div>
	</div>
}

@code {

	/// <summary>
	///   The unique identifier of the category to display.
	/// </summary>
	[Parameter]
	public required string Id { get; set; } = string.Empty;

	[CascadingParameter] private Task<AuthenticationState>? AuthenticationState { get; set; }

	/// <summary>
	///   The category data to be displayed on the page.
	/// </summary>
	private CategoryDto? _category;

	/// <summary>
	///   Indicates whether the component is currently loading data.
	/// </summary>
	private bool _isLoading = true;

	/// <summary>
	///   Error message returned by the handler when loading fails. Shown in the UI.
	/// </summary>
	private string? _errorMessage;

	/// <summary>
	///   Initializes the component by loading the category data using the GetCategoryHandler.
	/// </summary>
	protected override async Task OnInitializedAsync()
	{
		Logger?.LogInformation("Loading category details for Id: {CategoryId}", Id);
		_isLoading = true;

		try
		{
			var result = await GetHandler.HandleAsync(Id);

			if (result is { Success: true })
			{
				_category = result.Value;
				_errorMessage = null;
				Logger?.LogInformation("Category loaded successfully: {CategoryId}", Id);
			}
			else
			{
				_category = null;
				_errorMessage = result?.Error ?? "Category not found.";
				Logger?.LogWarning("Failed to load category: {CategoryId}. Error: {Error}", Id, _errorMessage);
			}
		}
		finally
		{
			_isLoading = false;
		}
	}

	/// <summary>
	///   Navigates to the edit page for the current category.
	/// </summary>
	private void GoToEdit()
	{
		Navigation.NavigateTo($"/categories/edit/{Id}");
	}

	/// <summary>
	///   Navigates back to the category list page.
	/// </summary>
	private void GoToList()
	{
		Navigation.NavigateTo("/categories");
	}

}
